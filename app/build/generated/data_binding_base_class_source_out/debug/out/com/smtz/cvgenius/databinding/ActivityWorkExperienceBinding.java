// Generated by view binder compiler. Do not edit!
package com.smtz.cvgenius.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.smtz.cvgenius.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityWorkExperienceBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView btnBack;

  @NonNull
  public final FrameLayout frameLayout;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final RecyclerView rvWorkExperiences;

  @NonNull
  public final MaterialToolbar toolBar;

  @NonNull
  public final ViewPodWorkExperienceBinding vpAddWorkExperience;

  private ActivityWorkExperienceBinding(@NonNull LinearLayout rootView, @NonNull ImageView btnBack,
      @NonNull FrameLayout frameLayout, @NonNull NestedScrollView nestedScrollView,
      @NonNull RecyclerView rvWorkExperiences, @NonNull MaterialToolbar toolBar,
      @NonNull ViewPodWorkExperienceBinding vpAddWorkExperience) {
    this.rootView = rootView;
    this.btnBack = btnBack;
    this.frameLayout = frameLayout;
    this.nestedScrollView = nestedScrollView;
    this.rvWorkExperiences = rvWorkExperiences;
    this.toolBar = toolBar;
    this.vpAddWorkExperience = vpAddWorkExperience;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWorkExperienceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWorkExperienceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_work_experience, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWorkExperienceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnBack;
      ImageView btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.frameLayout;
      FrameLayout frameLayout = ViewBindings.findChildViewById(rootView, id);
      if (frameLayout == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.rvWorkExperiences;
      RecyclerView rvWorkExperiences = ViewBindings.findChildViewById(rootView, id);
      if (rvWorkExperiences == null) {
        break missingId;
      }

      id = R.id.toolBar;
      MaterialToolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      id = R.id.vpAddWorkExperience;
      View vpAddWorkExperience = ViewBindings.findChildViewById(rootView, id);
      if (vpAddWorkExperience == null) {
        break missingId;
      }
      ViewPodWorkExperienceBinding binding_vpAddWorkExperience = ViewPodWorkExperienceBinding.bind(vpAddWorkExperience);

      return new ActivityWorkExperienceBinding((LinearLayout) rootView, btnBack, frameLayout,
          nestedScrollView, rvWorkExperiences, toolBar, binding_vpAddWorkExperience);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
