// Generated by view binder compiler. Do not edit!
package com.smtz.cvgenius.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.smtz.cvgenius.R;
import com.smtz.cvgenius.presentation.preview.templateViewPods.ResumeFreeOneViewPod;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ViewPodZresumeFreeOneBinding implements ViewBinding {
  @NonNull
  private final ResumeFreeOneViewPod rootView;

  @NonNull
  public final LinearLayout containerAchievement;

  @NonNull
  public final LinearLayout containerAddress;

  @NonNull
  public final LinearLayout containerEducation;

  @NonNull
  public final LinearLayout containerFirstPageBothSides;

  @NonNull
  public final LinearLayout containerFirstPageLeft;

  @NonNull
  public final LinearLayout containerFirstPageRight;

  @NonNull
  public final LinearLayout containerName;

  @NonNull
  public final LinearLayout containerObjective;

  @NonNull
  public final LinearLayout containerPosition;

  @NonNull
  public final LinearLayout containerProject;

  @NonNull
  public final LinearLayout containerReference;

  @NonNull
  public final LinearLayout containerSecondPageBothSides;

  @NonNull
  public final LinearLayout containerSecondPageLeftSide;

  @NonNull
  public final LinearLayout containerSecondPageRightSide;

  @NonNull
  public final LinearLayout containerSkill;

  @NonNull
  public final LinearLayout containerWorkExp;

  @NonNull
  public final LinearLayout firstElement;

  @NonNull
  public final LinearLayout firstRootView;

  @NonNull
  public final GridLayout gridLayoutPersonalDetail;

  @NonNull
  public final ImageView ivProfileImage;

  @NonNull
  public final ImageView ivSignature;

  @NonNull
  public final LinearLayout secondRootViewFreeOne;

  @NonNull
  public final ResumeFreeOneViewPod templateone;

  @NonNull
  public final View viewBelowObjective;

  @NonNull
  public final View viewBelowPersonalDetails;

  @NonNull
  public final View viewFirstBottomost;

  private ViewPodZresumeFreeOneBinding(@NonNull ResumeFreeOneViewPod rootView,
      @NonNull LinearLayout containerAchievement, @NonNull LinearLayout containerAddress,
      @NonNull LinearLayout containerEducation, @NonNull LinearLayout containerFirstPageBothSides,
      @NonNull LinearLayout containerFirstPageLeft, @NonNull LinearLayout containerFirstPageRight,
      @NonNull LinearLayout containerName, @NonNull LinearLayout containerObjective,
      @NonNull LinearLayout containerPosition, @NonNull LinearLayout containerProject,
      @NonNull LinearLayout containerReference, @NonNull LinearLayout containerSecondPageBothSides,
      @NonNull LinearLayout containerSecondPageLeftSide,
      @NonNull LinearLayout containerSecondPageRightSide, @NonNull LinearLayout containerSkill,
      @NonNull LinearLayout containerWorkExp, @NonNull LinearLayout firstElement,
      @NonNull LinearLayout firstRootView, @NonNull GridLayout gridLayoutPersonalDetail,
      @NonNull ImageView ivProfileImage, @NonNull ImageView ivSignature,
      @NonNull LinearLayout secondRootViewFreeOne, @NonNull ResumeFreeOneViewPod templateone,
      @NonNull View viewBelowObjective, @NonNull View viewBelowPersonalDetails,
      @NonNull View viewFirstBottomost) {
    this.rootView = rootView;
    this.containerAchievement = containerAchievement;
    this.containerAddress = containerAddress;
    this.containerEducation = containerEducation;
    this.containerFirstPageBothSides = containerFirstPageBothSides;
    this.containerFirstPageLeft = containerFirstPageLeft;
    this.containerFirstPageRight = containerFirstPageRight;
    this.containerName = containerName;
    this.containerObjective = containerObjective;
    this.containerPosition = containerPosition;
    this.containerProject = containerProject;
    this.containerReference = containerReference;
    this.containerSecondPageBothSides = containerSecondPageBothSides;
    this.containerSecondPageLeftSide = containerSecondPageLeftSide;
    this.containerSecondPageRightSide = containerSecondPageRightSide;
    this.containerSkill = containerSkill;
    this.containerWorkExp = containerWorkExp;
    this.firstElement = firstElement;
    this.firstRootView = firstRootView;
    this.gridLayoutPersonalDetail = gridLayoutPersonalDetail;
    this.ivProfileImage = ivProfileImage;
    this.ivSignature = ivSignature;
    this.secondRootViewFreeOne = secondRootViewFreeOne;
    this.templateone = templateone;
    this.viewBelowObjective = viewBelowObjective;
    this.viewBelowPersonalDetails = viewBelowPersonalDetails;
    this.viewFirstBottomost = viewFirstBottomost;
  }

  @Override
  @NonNull
  public ResumeFreeOneViewPod getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewPodZresumeFreeOneBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewPodZresumeFreeOneBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_pod_zresume_free_one, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewPodZresumeFreeOneBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.containerAchievement;
      LinearLayout containerAchievement = ViewBindings.findChildViewById(rootView, id);
      if (containerAchievement == null) {
        break missingId;
      }

      id = R.id.containerAddress;
      LinearLayout containerAddress = ViewBindings.findChildViewById(rootView, id);
      if (containerAddress == null) {
        break missingId;
      }

      id = R.id.containerEducation;
      LinearLayout containerEducation = ViewBindings.findChildViewById(rootView, id);
      if (containerEducation == null) {
        break missingId;
      }

      id = R.id.containerFirstPageBothSides;
      LinearLayout containerFirstPageBothSides = ViewBindings.findChildViewById(rootView, id);
      if (containerFirstPageBothSides == null) {
        break missingId;
      }

      id = R.id.containerFirstPageLeft;
      LinearLayout containerFirstPageLeft = ViewBindings.findChildViewById(rootView, id);
      if (containerFirstPageLeft == null) {
        break missingId;
      }

      id = R.id.containerFirstPageRight;
      LinearLayout containerFirstPageRight = ViewBindings.findChildViewById(rootView, id);
      if (containerFirstPageRight == null) {
        break missingId;
      }

      id = R.id.containerName;
      LinearLayout containerName = ViewBindings.findChildViewById(rootView, id);
      if (containerName == null) {
        break missingId;
      }

      id = R.id.containerObjective;
      LinearLayout containerObjective = ViewBindings.findChildViewById(rootView, id);
      if (containerObjective == null) {
        break missingId;
      }

      id = R.id.containerPosition;
      LinearLayout containerPosition = ViewBindings.findChildViewById(rootView, id);
      if (containerPosition == null) {
        break missingId;
      }

      id = R.id.containerProject;
      LinearLayout containerProject = ViewBindings.findChildViewById(rootView, id);
      if (containerProject == null) {
        break missingId;
      }

      id = R.id.containerReference;
      LinearLayout containerReference = ViewBindings.findChildViewById(rootView, id);
      if (containerReference == null) {
        break missingId;
      }

      id = R.id.containerSecondPageBothSides;
      LinearLayout containerSecondPageBothSides = ViewBindings.findChildViewById(rootView, id);
      if (containerSecondPageBothSides == null) {
        break missingId;
      }

      id = R.id.containerSecondPageLeftSide;
      LinearLayout containerSecondPageLeftSide = ViewBindings.findChildViewById(rootView, id);
      if (containerSecondPageLeftSide == null) {
        break missingId;
      }

      id = R.id.containerSecondPageRightSide;
      LinearLayout containerSecondPageRightSide = ViewBindings.findChildViewById(rootView, id);
      if (containerSecondPageRightSide == null) {
        break missingId;
      }

      id = R.id.containerSkill;
      LinearLayout containerSkill = ViewBindings.findChildViewById(rootView, id);
      if (containerSkill == null) {
        break missingId;
      }

      id = R.id.containerWorkExp;
      LinearLayout containerWorkExp = ViewBindings.findChildViewById(rootView, id);
      if (containerWorkExp == null) {
        break missingId;
      }

      id = R.id.firstElement;
      LinearLayout firstElement = ViewBindings.findChildViewById(rootView, id);
      if (firstElement == null) {
        break missingId;
      }

      id = R.id.firstRootView;
      LinearLayout firstRootView = ViewBindings.findChildViewById(rootView, id);
      if (firstRootView == null) {
        break missingId;
      }

      id = R.id.gridLayoutPersonalDetail;
      GridLayout gridLayoutPersonalDetail = ViewBindings.findChildViewById(rootView, id);
      if (gridLayoutPersonalDetail == null) {
        break missingId;
      }

      id = R.id.ivProfileImage;
      ImageView ivProfileImage = ViewBindings.findChildViewById(rootView, id);
      if (ivProfileImage == null) {
        break missingId;
      }

      id = R.id.ivSignature;
      ImageView ivSignature = ViewBindings.findChildViewById(rootView, id);
      if (ivSignature == null) {
        break missingId;
      }

      id = R.id.secondRootViewFreeOne;
      LinearLayout secondRootViewFreeOne = ViewBindings.findChildViewById(rootView, id);
      if (secondRootViewFreeOne == null) {
        break missingId;
      }

      ResumeFreeOneViewPod templateone = (ResumeFreeOneViewPod) rootView;

      id = R.id.viewBelowObjective;
      View viewBelowObjective = ViewBindings.findChildViewById(rootView, id);
      if (viewBelowObjective == null) {
        break missingId;
      }

      id = R.id.viewBelowPersonalDetails;
      View viewBelowPersonalDetails = ViewBindings.findChildViewById(rootView, id);
      if (viewBelowPersonalDetails == null) {
        break missingId;
      }

      id = R.id.viewFirstBottomost;
      View viewFirstBottomost = ViewBindings.findChildViewById(rootView, id);
      if (viewFirstBottomost == null) {
        break missingId;
      }

      return new ViewPodZresumeFreeOneBinding((ResumeFreeOneViewPod) rootView, containerAchievement,
          containerAddress, containerEducation, containerFirstPageBothSides, containerFirstPageLeft,
          containerFirstPageRight, containerName, containerObjective, containerPosition,
          containerProject, containerReference, containerSecondPageBothSides,
          containerSecondPageLeftSide, containerSecondPageRightSide, containerSkill,
          containerWorkExp, firstElement, firstRootView, gridLayoutPersonalDetail, ivProfileImage,
          ivSignature, secondRootViewFreeOne, templateone, viewBelowObjective,
          viewBelowPersonalDetails, viewFirstBottomost);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
