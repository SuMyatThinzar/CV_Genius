// Generated by view binder compiler. Do not edit!
package com.smtz.cvgenius.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.smtz.cvgenius.R;
import com.smtz.cvgenius.presentation.details.workExperiences.WorkExperienceViewPod;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import soup.neumorphism.NeumorphButton;

public final class ViewPodWorkExperienceBinding implements ViewBinding {
  @NonNull
  private final WorkExperienceViewPod rootView;

  @NonNull
  public final ImageView btnDelete;

  @NonNull
  public final NeumorphButton btnSave;

  @NonNull
  public final CheckBox cbEndDate;

  @NonNull
  public final RelativeLayout containerCollapsed;

  @NonNull
  public final LinearLayout containerExpanded;

  @NonNull
  public final TextView endDate;

  @NonNull
  public final TextView errorCompany;

  @NonNull
  public final TextView errorWorkPosition;

  @NonNull
  public final TextInputEditText etCompany;

  @NonNull
  public final TextInputEditText etDescription;

  @NonNull
  public final TextInputEditText etWorkPosition;

  @NonNull
  public final TextView startDate;

  @NonNull
  public final TextView tvDetailName;

  @NonNull
  public final TextView tvDetailNameExpanded;

  private ViewPodWorkExperienceBinding(@NonNull WorkExperienceViewPod rootView,
      @NonNull ImageView btnDelete, @NonNull NeumorphButton btnSave, @NonNull CheckBox cbEndDate,
      @NonNull RelativeLayout containerCollapsed, @NonNull LinearLayout containerExpanded,
      @NonNull TextView endDate, @NonNull TextView errorCompany,
      @NonNull TextView errorWorkPosition, @NonNull TextInputEditText etCompany,
      @NonNull TextInputEditText etDescription, @NonNull TextInputEditText etWorkPosition,
      @NonNull TextView startDate, @NonNull TextView tvDetailName,
      @NonNull TextView tvDetailNameExpanded) {
    this.rootView = rootView;
    this.btnDelete = btnDelete;
    this.btnSave = btnSave;
    this.cbEndDate = cbEndDate;
    this.containerCollapsed = containerCollapsed;
    this.containerExpanded = containerExpanded;
    this.endDate = endDate;
    this.errorCompany = errorCompany;
    this.errorWorkPosition = errorWorkPosition;
    this.etCompany = etCompany;
    this.etDescription = etDescription;
    this.etWorkPosition = etWorkPosition;
    this.startDate = startDate;
    this.tvDetailName = tvDetailName;
    this.tvDetailNameExpanded = tvDetailNameExpanded;
  }

  @Override
  @NonNull
  public WorkExperienceViewPod getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewPodWorkExperienceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewPodWorkExperienceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_pod_work_experience, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewPodWorkExperienceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDelete;
      ImageView btnDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.btnSave;
      NeumorphButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.cbEndDate;
      CheckBox cbEndDate = ViewBindings.findChildViewById(rootView, id);
      if (cbEndDate == null) {
        break missingId;
      }

      id = R.id.containerCollapsed;
      RelativeLayout containerCollapsed = ViewBindings.findChildViewById(rootView, id);
      if (containerCollapsed == null) {
        break missingId;
      }

      id = R.id.containerExpanded;
      LinearLayout containerExpanded = ViewBindings.findChildViewById(rootView, id);
      if (containerExpanded == null) {
        break missingId;
      }

      id = R.id.endDate;
      TextView endDate = ViewBindings.findChildViewById(rootView, id);
      if (endDate == null) {
        break missingId;
      }

      id = R.id.errorCompany;
      TextView errorCompany = ViewBindings.findChildViewById(rootView, id);
      if (errorCompany == null) {
        break missingId;
      }

      id = R.id.errorWorkPosition;
      TextView errorWorkPosition = ViewBindings.findChildViewById(rootView, id);
      if (errorWorkPosition == null) {
        break missingId;
      }

      id = R.id.etCompany;
      TextInputEditText etCompany = ViewBindings.findChildViewById(rootView, id);
      if (etCompany == null) {
        break missingId;
      }

      id = R.id.etDescription;
      TextInputEditText etDescription = ViewBindings.findChildViewById(rootView, id);
      if (etDescription == null) {
        break missingId;
      }

      id = R.id.etWorkPosition;
      TextInputEditText etWorkPosition = ViewBindings.findChildViewById(rootView, id);
      if (etWorkPosition == null) {
        break missingId;
      }

      id = R.id.startDate;
      TextView startDate = ViewBindings.findChildViewById(rootView, id);
      if (startDate == null) {
        break missingId;
      }

      id = R.id.tvDetailName;
      TextView tvDetailName = ViewBindings.findChildViewById(rootView, id);
      if (tvDetailName == null) {
        break missingId;
      }

      id = R.id.tvDetailNameExpanded;
      TextView tvDetailNameExpanded = ViewBindings.findChildViewById(rootView, id);
      if (tvDetailNameExpanded == null) {
        break missingId;
      }

      return new ViewPodWorkExperienceBinding((WorkExperienceViewPod) rootView, btnDelete, btnSave,
          cbEndDate, containerCollapsed, containerExpanded, endDate, errorCompany,
          errorWorkPosition, etCompany, etDescription, etWorkPosition, startDate, tvDetailName,
          tvDetailNameExpanded);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
